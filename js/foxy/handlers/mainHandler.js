// js/foxy/handlers/mainHandler.js
import { matchIntent } from "../core/intents.js";
import { matchService, emoji, services, randomReply } from "../core/services.js";
import {
  getLastInput, setLastInput,
  getLastIntent, setLastIntent,
  getLastService, setLastService,
  getUserName, setUserName
} from "../core/state.js";

import { addMessage, clearButtons } from "../ui/dom.js";
import { renderBookingOptions, renderServiceList } from "../ui/ui.js";

import { handleDesign } from "./design.js";
import { handleMood } from "./mood.js";
import { handleSmalltalk } from "./smalltalk.js";
import { handleServiceInput, showServiceDetails } from "./servicesHandler.js";
import { handleDiscount } from "./discount.js";

const greetings = [
  `–ü—Ä–∏–≤–µ—Ç, %NAME%! üíñ –ß–µ–º —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –Ω–æ–≥–æ—Ç–∫–∏?`,
  `–°–∞–ª—é—Ç, %NAME%! üåü –ì–æ—Ç–æ–≤–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–æ—Ç—É –≤–º–µ—Å—Ç–µ?`,
  `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, %NAME%! ‚ú® –ß—Ç–æ –≤—ã–±–µ—Ä–µ–º –¥–ª—è —Ç–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–∞–Ω–∏–∫—é—Ä–∞?`,
  `–•—ç–π, %NAME%! üíÖ –ì–æ—Ç–æ–≤–∞ –∫ —Å—Ç–∏–ª—å–Ω–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—é?`,
  `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %NAME%! üòä –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –Ω–æ–≥–æ—Ç–∫–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–º–∏!`
];

function randomGreeting(name) {
  const tpl = greetings[Math.floor(Math.random() * greetings.length)];
  return tpl.replace("%NAME%", name);
}

function showSuggestions() {
  addMessage(
    `<div class="foxy-suggestions">
       <div class="description">–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</div>
       <div class="buttons-wrapper">
         <button class="ai-btn" data-action="–ø—Ä–∞–π—Å">üíÖ –ó–∞–≥–ª—è–Ω—É—Ç—å –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</button>
         <button class="ai-btn" data-action="–¥–∏–∑–∞–π–Ω">üé® –í–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏ –¥–∏–∑–∞–π–Ω–∞</button>
         <button class="ai-btn" data-action="–∑–∞–ø–∏—Å–∞—Ç—å—Å—è">üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</button>
         <button class="ai-btn" data-action="—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å">‚ùì –£–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</button>
         <button class="ai-btn" data-action="—Å–∫–∏–¥–∫–∞">üè∑Ô∏è –°–∫–∏–¥–∫–∞</button>
       </div>
       <div class="footer">–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ –¥—É—à–µ, –∏ —è –≤—Å—ë –ø–æ–∫–∞–∂—É üíñ</div>
     </div>`,
    true
  );
}

export function handleUserInput(message) {
  clearButtons();

  // –§–∞–∑–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
  if (getLastIntent() === 'askName') {
    const name = message.trim();
    setUserName(name);
    localStorage.setItem('foxy_userName', name);
    addMessage(`–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${name}! üíñ`, false);
    addTypingMessage(`<strong>${emoji()} –§–æ–∫—Å–∏:</strong> ${randomGreeting(name)}`, 300, true);
    showSuggestions();
    setLastIntent('');        // —Å–±—Ä–æ—Å –∏–Ω—Ç–µ–Ω—Ç–∞
    return;
  }

  const input = message.trim();
  if (!input || input.toLowerCase() === getLastInput()) return;
  const prevIntent = getLastIntent();
  setLastInput(input.toLowerCase());

  addMessage(`–í—ã: ${message}`, false, true);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ–Ω—Ç
  const intent = matchIntent(input);
  setLastIntent(intent);

  // üö¶ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
  if (intent === 'confirm' && prevIntent === 'service') {
    showServiceDetails(getLastService());
    return;
  }

  // üéÅ –ü—Ä–æ–º–æ / —Å–∫–∏–¥–∫–∞
  if (intent === "discount") {
    handleDiscount();
    return;
  }

  // –û–±—â–µ–Ω–∏–µ
  if (handleSmalltalk(intent)) return;

  // –ü–æ–∫–∞–∑ —É—Å–ª—É–≥
  if (intent === "showSomething" || intent === "showServices") {
    const svc2 = matchService(input);
    if (svc2) {
      setLastService(svc2.name);
      setLastIntent("service");
      handleServiceInput(svc2.name);
    } else {
      renderServiceList();
    }
    return;
  }

  // –£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
  const inquireRe = /(—Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–ª–∫[–æ—å—è]|—Å—Ç–æ–∏–º–æ—Å—Ç|—Ü–µ–Ω–∞)/i;
  if (inquireRe.test(input)) {
    const svc2 = matchService(input);
    if (svc2) setLastService(svc2.name);

    if (getLastService() && services[getLastService()]) {
      addMessage(`${emoji()} ${randomReply("inquireDetails")}`, true);
      addMessage(`¬´${getLastService()}¬ª üíÖ\n${services[getLastService()]}`);
      renderBookingOptions();
    } else {
      addMessage(randomReply("fallback"));
      renderServiceList();
    }
    return;
  }

  // –ü—Ä—è–º–∞—è —É—Å–ª—É–≥–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
  const svc = matchService(input);
  if (svc) {
    setLastService(svc.name);
    setLastIntent("service");
    handleServiceInput(svc.name);
    return;
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  switch (intent) {
    case "design":
      handleDesign();
      break;
    case "mood":
      handleMood();
      break;
    case "booking":
    case "confirmBooking":
      renderBookingOptions();
      break;
    default:
      addMessage(randomReply("fallback"));
      renderServiceList();
  }
}
