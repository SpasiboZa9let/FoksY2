import { matchIntent } from "../core/intents.js";
import { matchService, emoji, services, randomReply } from "../core/services.js";
import {
  lastInput, setLastInput, setLastIntent,
  setLastService, lastService
} from "../core/state.js";

import { addMessage, clearButtons } from "../ui/dom.js";
import { renderBookingOptions, renderServiceList } from "../ui/ui.js";

import { handleDesign } from "./design.js";
import { handleMood } from "./mood.js";
import { handleSmalltalk } from "./smalltalk.js";
import { handleServiceInput } from "./servicesHandler.js";

// –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
export function handleUserInput(message) {
  clearButtons();

  const input = message.trim().toLowerCase();
  if (!input || input === lastInput) return;
  setLastInput(input);

  addMessage(`–í—ã: ${message}`);

  // ü§ñ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è smalltalk –∏ –ø—Ä–æ—á.)
  const intent = matchIntent(input);
  setLastIntent(intent);

  // ü¶ä Smalltalk-–∏–Ω—Ç–µ–Ω—Ç—ã
  if (handleSmalltalk(intent)) return;

  // üóÇ –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –∏–ª–∏ ¬´–ø–æ–∫–∞–∂–∏¬ª (—Å –ø—Ä—è–º—ã–º –≤—ã–±–æ—Ä–æ–º —Å–µ—Ä–≤–∏—Å–∞)
  if (intent === "showSomething" || intent === "showServices") {
    const svc2 = matchService(input);
    if (svc2) {
      setLastService(svc2.name);
      setLastIntent("service");
      handleServiceInput(svc2.name);
    } else {
      renderServiceList();
    }
    return;
  }

  // üìù –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–ª—é–±—ã–µ ¬´—Å–∫–æ–ª—å–∫–æ¬ª, ¬´—Ü–µ–Ω–∞¬ª, ¬´—Å—Ç–æ–∏–º–æ—Å—Ç—å¬ª –∏ –∏—Ö –æ–ø–µ—á–∞—Ç–∫–∏)
  const inquireRe = /(—Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–ª–∫[–æ—å—è]|—Å—Ç–æ–∏–º–æ—Å—Ç|—Ü–µ–Ω–∞)/i;
  if (inquireRe.test(input)) {
    // –µ—Å–ª–∏ –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ—ë
    const svc2 = matchService(input);
    if (svc2) setLastService(svc2.name);

    if (lastService && services[lastService]) {
      // –≤—ã–≤–æ–¥–∏–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ—Ç–æ–º –¥–µ—Ç–∞–ª–∏ –∏ –∫–Ω–æ–ø–∫–∏
      addMessage(`${emoji()} ${randomReply("inquireDetails")}`, false);
      addMessage(`¬´${lastService}¬ª üíÖ\n${services[lastService]}`);
      renderBookingOptions();
    } else {
      addMessage(randomReply("fallback"));
      renderServiceList();
    }
    return;
  }

  // üîç –ü–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å —É—Å–ª—É–≥—É –Ω–∞–ø—Ä—è–º—É—é
  const svc = matchService(input);
  if (svc) {
    setLastService(svc.name);
    setLastIntent("service");
    handleServiceInput(svc.name);
    return;
  }

  // üéØ –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã
  switch (intent) {
    case "design":
      handleDesign();
      break;

    case "mood":
      handleMood();
      break;

    case "booking":
    case "confirmBooking":
      renderBookingOptions();
      break;

    default:
      addMessage(randomReply("fallback"));
      renderServiceList();
  }
}
