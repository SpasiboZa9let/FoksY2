import { matchIntent } from "../core/intents.js";
import { matchService, emoji, services, randomReply } from "../core/services.js";
import {
  getLastInput, setLastInput,
  getLastIntent, setLastIntent,
  getLastService, setLastService,
  getUserName, setUserName
} from "../core/state.js";
import { calculateDiscount } from "../core/calc.js";

import { addMessage, clearButtons, clearChat } from "../ui/dom.js";
import { renderBookingOptions, renderServiceList } from "../ui/ui.js";
import { showCurrentPoints } from "../core/rewards.js";
import { addLoyaltyPoints, redeemCode } from "../core/rewards.js";

import { handleDesign } from "./design.js";
import { handleMood } from "./mood.js";
import { handleSmalltalk } from "./smalltalk.js";
import { handleServiceInput, showServiceDetails } from "./servicesHandler.js";
import { sendBooking } from "./booking.js";

const greetings = [
  `–ü—Ä–∏–≤–µ—Ç, %NAME%! üíñ –ß–µ–º —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –Ω–æ–≥–æ—Ç–∫–∏?`,
  `–°–∞–ª—é—Ç, %NAME%! üåü –ì–æ—Ç–æ–≤–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–æ—Ç—É –≤–º–µ—Å—Ç–µ?`,
  `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, %NAME%! ‚ú® –ß—Ç–æ –≤—ã–±–µ—Ä–µ–º –¥–ª—è —Ç–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–∞–Ω–∏–∫—é—Ä–∞?`,
  `–•—ç–π, %NAME%! üíÖ –ì–æ—Ç–æ–≤–∞ –∫ —Å—Ç–∏–ª—å–Ω–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—é?`,
  `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %NAME%! üòä –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –Ω–æ–≥–æ—Ç–∫–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–º–∏!`
];

function randomGreeting(name) {
  const tpl = greetings[Math.floor(Math.random() * greetings.length)];
  return tpl.replace("%NAME%", name);
}

export function startCalc() {
  setLastIntent("awaitingCalc");
  addMessage("–í–≤–µ–¥–∏ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n1500 300");
}

function showSuggestions() {
  addMessage(
    `<div class="foxy-suggestions">
       <div class="description">–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</div>
       <div class="buttons-wrapper">
         <button class="ai-btn" data-action="–ø—Ä–∞–π—Å">üíÖ –ó–∞–≥–ª—è–Ω—É—Ç—å –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</button>
         <button class="ai-btn" data-action="–¥–∏–∑–∞–π–Ω">üé® –í–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏ –¥–∏–∑–∞–π–Ω–∞</button>
         <button class="ai-btn" data-action="–∑–∞–ø–∏—Å–∞—Ç—å—Å—è">üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</button>
         <button class="ai-btn" data-action="—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å">‚ùì –£–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</button>
         <button class="ai-btn" data-action="–±–∞–ª–ª—ã">‚≠ê –ú–æ–∏ –±–∞–ª–ª—ã</button>
         <button class="ai-btn" data-action="–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä">üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–∫–∏–¥–∫–∏</button>
       </div>
       <div class="footer">–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ –¥—É—à–µ, –∏ —è –≤—Å—ë –ø–æ–∫–∞–∂—É üíñ</div>
     </div>`,
    true
  );
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
export async function handleUserInput(message) {
  clearButtons();

  const input = message.trim();
  if (!input || input.toLowerCase() === getLastInput()) return;

  setLastInput(input.toLowerCase());
  addMessage(`–í—ã: ${message}`, false, true);

  // –ü—Ä–æ–º–æ–∫–æ–¥
  if (handlePromoCode(input)) return;

  // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (getLastIntent() === "askName") {
    const name = input;
    setUserName(name);
    localStorage.setItem("foxy_userName", name);
    clearChat();
    addMessage(`–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${name}! üíñ`, false);
    setLastIntent("");
    return;
  }

  // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–∫–∏–¥–∫–∏
  if (getLastIntent() === "awaitingCalc") {
    const match = input.match(/(\d+)[^\d]+(\d+)/);
    if (match) {
      const price = parseInt(match[1]);
      const points = parseInt(match[2]);
      const res = calculateDiscount(points, price);
      addMessage(
        `üéØ –°–∫–∏–¥–∫–∞: ${res.discountRub}‚ÇΩ (${res.discountPercent}%)\n` +
        `–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${res.finalPrice}‚ÇΩ\n` +
        `–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: ${res.usedPoints} –±–∞–ª–ª–æ–≤`
      );
    } else {
      addMessage("–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω. –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n1200 300");
    }
    setLastIntent("");
    return;
  }

  const intent = matchIntent(input);
  setLastIntent(intent);

  if (intent === "confirm" && getLastService()) {
    showServiceDetails(getLastService());
    return;
  }

  if (handleSmalltalk(intent)) return;

  if (intent === "showSomething" || intent === "showServices") {
    const svc2 = matchService(input);
    if (svc2) {
      setLastService(svc2.name);
      setLastIntent("service");
      handleServiceInput(svc2.name);
      setTimeout(() => {
        addMessage(`–ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±—è –Ω–∞ ${svc2.name}? üíñ`);
      }, 1000);
    } else {
      renderServiceList();
    }
    return;
  }

  const inquireRe = /(—Å–∫–æ–ª—å–∫–æ|—Å–∫–æ–ª–∫[–æ—å—è]|—Å—Ç–æ–∏–º–æ—Å—Ç|—Ü–µ–Ω–∞)/i;
  if (inquireRe.test(input)) {
    const svc2 = matchService(input);
    if (svc2) setLastService(svc2.name);

    const svcName = getLastService();
    if (svcName && services[svcName]) {
      addMessage(`${emoji()} ${randomReply("inquireDetails")}`, true);
      addMessage(`¬´${svcName}¬ª üíÖ\n${services[svcName]}`);
      setTimeout(() => {
        addMessage(`–•–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${svcName}? üòä`);
      }, 1200);
      renderBookingOptions();
    } else {
      addMessage(randomReply("fallback"));
      renderServiceList();
    }
    return;
  }

  const svc = matchService(input);
  if (svc) {
    setLastService(svc.name);
    setLastIntent("service");
    handleServiceInput(svc.name);
    setTimeout(() => {
      addMessage(`–ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±—è –Ω–∞ ${svc.name}? üíñ`);
    }, 1000);
    return;
  }

  if (intent === "booking" || intent === "confirmBooking") {
    const service = getLastService();
    const name = getUserName();
    const date = new Date().toISOString().split("T")[0];

    if (service && name) {
      addMessage(`–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞—è–≤–∫—É –Ω–∞ ¬´${service}¬ª –¥–ª—è ${name}... üì®`);
      const res = await sendBooking({ name, service, date });

      if (res.success) {
        addMessage("üì¨ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
      } else {
        addMessage("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!");
      }
    } else if (!service) {
      addMessage(`–ù–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å? üíÖ`);
      renderServiceList();
    } else {
      addMessage(`–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üòä –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è.`);
      setLastIntent("askName");
    }
    return;
  }

  switch (intent) {
    case "design":
      handleDesign();
      break;
    case "points":
      showCurrentPoints();
      break;
    case "calc":
      startCalc();
      break;
    case "mood":
      handleMood();
      break;
    case "help":
      addMessage("ü¶ä –Ø –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º! –í–æ—Ç —á—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:");
      showSuggestions();
      break;
    default:
      addMessage(randomReply("fallback"));
      renderServiceList();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AB94, FO
