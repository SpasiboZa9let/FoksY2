import { matchIntent } from "../core/intents.js";
import { matchService, emoji, services, randomReply } from "../core/services.js";
import {
  lastInput, setLastInput, setLastIntent,
  setLastService, lastService
} from "../core/state.js";

import { addMessage, clearButtons } from "../ui/dom.js";
import { renderBookingOptions, renderServiceList } from "../ui/ui.js";

import { handleDesign } from "./design.js";
import { handleMood } from "./mood.js";
import { handleSmalltalk } from "./smalltalk.js";
import { handleServiceInput } from "./servicesHandler.js";

// –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
export function handleUserInput(message) {
  clearButtons();

  const input = message.trim().toLowerCase();
  if (!input || input === lastInput) return;
  setLastInput(input);

  addMessage(`–í—ã: ${message}`);

  // üí¨ –£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
if (/—Å–∫–æ–ª—å–∫–æ.*—Å—Ç–æ–∏—Ç|—Ü–µ–Ω–∞|–ø–æ–¥—Ä–æ–±–Ω|—É–∑–Ω–∞|—ç—Ç–æ —Å|–º–æ–∂–Ω–æ|–∞ –≥–¥–µ|–∞ –∫–æ–≥–¥–∞|–ø–æ–¥–æ–π–¥–µ—Ç|—É—Ç–æ—á–Ω–∏|–ø–æ–∫–∞–∂–∏|—è—Å–Ω–æ/i.test(input)) {
  if (lastService && services[lastService]) {
    addMessage(`${emoji()} –ê–≥–∞, —ç—Ç–æ ¬´${lastService}¬ª üíÖ\n${services[lastService]}`);
    renderBookingOptions();
    return;
  }
}

  // üîç –ü–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å —É—Å–ª—É–≥—É –Ω–∞–ø—Ä—è–º—É—é
  const svc = matchService(input);
  if (svc) {
    setLastService(svc.name);
    setLastIntent("service");
    handleServiceInput(svc.name);
    return;
  }

  // ü§ñ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω—Ç–µ–Ω—Ç–∞
  const intent = matchIntent(input);
  setLastIntent(intent);

  // üéØ –†–æ—É—Ç–∏–Ω–≥ –ø–æ –∏–Ω—Ç–µ–Ω—Ç–∞–º
  switch (intent) {
    case "greeting":
      addMessage(randomReply("greeting"));
      break;

    case "thanks":
      addMessage(randomReply("thanks"));
      break;

    case "bye":
      addMessage(randomReply("bye"));
      break;

    case "abilities":
    case "help":
    case "about":
      addMessage(`${emoji()} –í–æ—Ç —á–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:`);
      renderServiceList();
      break;

    case "design":
      handleDesign();
      break;

    case "mood":
      handleMood();
      break;

    case "showServices":
      renderServiceList();
      break;

    case "booking":
    case "confirmBooking":
      renderBookingOptions();
      break;

    default:
      if (!handleSmalltalk(intent)) {
        addMessage(randomReply("fallback"));
        renderServiceList();
      }
  }
}
