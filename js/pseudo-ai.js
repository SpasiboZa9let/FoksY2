// js/pseudo-ai.js
import { handleUserInput } from './foxy/handlers/mainHandler.js';
import { addTypingMessage }  from './foxy/ui/dom.js';
import { emoji }             from './foxy/core/services.js';
import { setUserName }       from './foxy/core/state.js';

const greetings = [
  `–ü—Ä–∏–≤–µ—Ç, %NAME%! üíñ –ß–µ–º —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –Ω–æ–≥–æ—Ç–∫–∏?`,
  `–°–∞–ª—é—Ç, %NAME%! üåü –ì–æ—Ç–æ–≤–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–æ—Ç—É –≤–º–µ—Å—Ç–µ?`,
  `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, %NAME%! ‚ú® –ß—Ç–æ –≤—ã–±–µ—Ä–µ–º –¥–ª—è —Ç–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–∞–Ω–∏–∫—é—Ä–∞?`,
  `–•—ç–π, %NAME%! üíÖ –ì–æ—Ç–æ–≤–∞ –∫ —Å—Ç–∏–ª—å–Ω–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—é?`,
  `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %NAME%! üòä –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –Ω–æ–≥–æ—Ç–∫–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–º–∏!`
];

function randomGreeting(name) {
  return greetings[Math.floor(Math.random() * greetings.length)]
    .replace('%NAME%', name);
}

function showSuggestions(delay = 0) {
  setTimeout(() => {
    addTypingMessage(
      `<div class="foxy-suggestions">
         <div class="description">–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</div>
         <div class="buttons-wrapper">
           <button class="ai-btn" data-action="–ø—Ä–∞–π—Å">üíÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç</button>
           <button class="ai-btn" data-action="–¥–∏–∑–∞–π–Ω">üé® –ò–¥–µ–∏ –¥–∏–∑–∞–π–Ω–∞</button>
           <button class="ai-btn" data-action="–∑–∞–ø–∏—Å–∞—Ç—å—Å—è">üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –≤—Ä–µ–º—è</button>
           <button class="ai-btn" data-action="—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å">‚ùì –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</button>
           <button class="ai-btn" data-action="—Å–∫–∏–¥–∫–∞">üè∑Ô∏è –°–∫–∏–¥–∫–∞</button>
         </div>
         <div class="footer">–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ, –∏ —è –ø–æ–∫–∞–∂—É üíñ</div>
       </div>`,
      600,
      true
    );
  }, delay);
}

function checkPromoReminder(delay = 0) {
  setTimeout(() => {
    const promoCode    = localStorage.getItem("promoCode");
    const promoExpires = localStorage.getItem("promoExpires");
    if (!promoCode || !promoExpires) return;

    const now     = Date.now();
    const expires = +promoExpires;
    if (now >= expires) {
      localStorage.removeItem("promoCode");
      localStorage.removeItem("promoExpires");
      localStorage.removeItem("promoUsed");
      return;
    }

    if (localStorage.getItem("promoUsed") !== 'true') {
      const deadline = new Date(expires).toLocaleDateString();
      addTypingMessage(
        `<div class="foxy-promo no-opacity">
           <p>üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ <strong>${promoCode}</strong> –¥–æ ${deadline}</p>
           <div class="buttons-wrapper mt-2">
             <button class="ai-btn" data-promo-action="used">‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</button>
             <button class="ai-btn" data-promo-action="later">‚è≥ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ</button>
           </div>
         </div>`,
        450,
        true
      );
      setTimeout(() => {
        const el = document.querySelector('.foxy-promo');
        if (el) {
          el.classList.remove('no-opacity');
          el.classList.add('foxy-fade-in');
        }
      }, 550);
    }
  }, delay);
}

function initFoxyAfterName(name) {
  addTypingMessage(
    `<strong>${emoji()} –§–æ–∫—Å–∏:</strong> ${randomGreeting(name)}`,
    500,
    true
  );
  checkPromoReminder(1300);
  showSuggestions(2100);
}

window.addEventListener('DOMContentLoaded', () => {
  console.log('[DEBUG] pseudo-ai.js –∑–∞–≥—Ä—É–∂–µ–Ω!');

  const name = localStorage.getItem('foxy_userName');
  if (!name || name.trim().length < 2) {
    addTypingMessage('ü¶ä –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', 500);
    localStorage.setItem('foxy_lastIntent', 'askName');
  } else {
    setUserName(name);
    initFoxyAfterName(name);
  }

  // Fullscreen-–∫–Ω–æ–ø–∫–∞
  const btn     = document.getElementById("toggle-fullscreen");
  const wrapper = document.querySelector(".chat-wrapper");
  let expanded = false;
  btn?.addEventListener("click", () => {
    expanded = !expanded;
    wrapper.classList.toggle("fullscreen");
    const icon = btn.querySelector("i");
    icon.setAttribute("data-lucide", expanded ? "minimize" : "maximize");
    lucide.createIcons();
  });
  document.addEventListener("keydown", e => {
    if (e.key === "Escape" && expanded) {
      expanded = false;
      wrapper.classList.remove("fullscreen");
      btn.querySelector("i").setAttribute("data-lucide","maximize");
      lucide.createIcons();
    }
  });

  // –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ë–ï–ó <form>
  const input     = document.getElementById('pseudo-input');
  const submitBtn = document.getElementById('pseudo-submit');

  function handleSubmit() {
    const text = input.value.trim();
    if (!text) return;
    const intent = localStorage.getItem('foxy_lastIntent');
    console.log('[DEBUG] Submit intent:', intent);

    if (intent === 'askName') {
      localStorage.setItem('foxy_userName', text);
      localStorage.removeItem('foxy_lastIntent');
      document.getElementById('pseudo-chat').innerHTML = '';
      setUserName(text);
      initFoxyAfterName(text);
    } else {
      handleUserInput(text);
      input.value = '';
    }
  }

  submitBtn.addEventListener('click', handleSubmit);
  input.addEventListener('keydown', e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleSubmit();
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∏ –ø—Ä–æ–º–æ-–∫–Ω–æ–ø–æ–∫
  document.body.addEventListener('click', event => {
    const actionBtn = event.target.closest('[data-action]');
    if (actionBtn) {
      handleUserInput(actionBtn.getAttribute('data-action'));
    }
    const promoBtn = event.target.closest('[data-promo-action]');
    if (promoBtn) {
      const action = promoBtn.getAttribute('data-promo-action');
      if (action === 'used') {
        localStorage.removeItem("promoCode");
        localStorage.removeItem("promoExpires");
        localStorage.setItem("promoUsed", "true");
        addTypingMessage(`–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å.`, 300);
        promoBtn.closest('.foxy-promo')?.remove();
      } else {
        addTypingMessage(`–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ üòâ`, 300);
      }
    }
  });
});
