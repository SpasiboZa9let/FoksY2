// js/pseudo-ai.js

import { handleUserInput } from './foxy/handlers/mainHandler.js';
import { addTypingMessage, addMessage, clearChat } from './foxy/ui/dom.js';
import { emoji } from './foxy/core/services.js';
import {
  setUserName,
  getLastIntent,
  setLastIntent
} from './foxy/core/state.js';

import { checkVisitPoints } from './foxy/core/rewards.js';

const greetings = [
  `–ü—Ä–∏–≤–µ—Ç, %NAME%! üíñ –ß–µ–º —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –Ω–æ–≥–æ—Ç–∫–∏?`,
  `–°–∞–ª—é—Ç, %NAME%! üåü –ì–æ—Ç–æ–≤–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–æ—Ç—É –≤–º–µ—Å—Ç–µ?`,
  `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, %NAME%! ‚ú® –ß—Ç–æ –≤—ã–±–µ—Ä–µ–º –¥–ª—è —Ç–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–∞–Ω–∏–∫—é—Ä–∞?`,
  `–•—ç–π, %NAME%! üíÖ –ì–æ—Ç–æ–≤–∞ –∫ —Å—Ç–∏–ª—å–Ω–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—é?`,
  `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %NAME%! üòä –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –Ω–æ–≥–æ—Ç–∫–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–º–∏!`
];

function randomGreeting(name) {
  return greetings[Math.floor(Math.random() * greetings.length)]
    .replace('%NAME%', name);
}

function showSuggestions(delay = 0) {
  setTimeout(() => {
    addTypingMessage(
      `<div class="foxy-suggestions">
         <div class="description">–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</div>
         <div class="buttons-wrapper">
           <button class="ai-btn" data-action="–ø—Ä–∞–π—Å">üíÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç</button>
           <button class="ai-btn" data-action="–¥–∏–∑–∞–π–Ω">üé® –ò–¥–µ–∏ –¥–∏–∑–∞–π–Ω–∞</button>
           <button class="ai-btn" data-action="–∑–∞–ø–∏—Å–∞—Ç—å—Å—è">üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –≤—Ä–µ–º—è</button>
           <button class="ai-btn" data-action="—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å">‚ùì –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</button>
           <button class="ai-btn" data-action="–±–∞–ª–ª—ã">‚≠ê –ú–æ–∏ –±–∞–ª–ª—ã</button>
           <button class="ai-btn" data-action="–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä">üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–∫–∏–¥–∫–∏</button>
         </div>
         <div class="footer">–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ, –∏ —è –ø–æ–∫–∞–∂—É üíñ</div>
       </div>`,
      600,
      true
    );

    setTimeout(() => {
      const sugg = document.querySelector('.foxy-suggestions');
      if (!sugg) return;

      const bubble = sugg.closest('.chat-bubble');
      if (!bubble) return;

      sugg.style.transition = 'opacity 0.5s ease';
      sugg.style.opacity = '0';

      setTimeout(() => bubble.remove(), 500);
    }, 8000);
  }, delay);
}

function initFoxyAfterName(name) {
  const bubbleHTML = `<strong>${emoji()} –§–æ–∫—Å–∏:</strong> ${randomGreeting(name)}`;
  addTypingMessage(bubbleHTML, 500, true, false);

  setTimeout(() => {
    const bubble = document.querySelector('.chat-bubble.welcome-message');
    if (!bubble) return;
    bubble.style.transition = 'opacity 0.5s ease';
    bubble.style.opacity = '0';
    setTimeout(() => bubble.remove(), 500);
  }, 5500);

  checkVisitPoints(); // üéØ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
  showSuggestions(2100);
}

export function initFoxyChat() {
  lucide.createIcons();
  console.log('[DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –§–æ–∫—Å–∏-—á–∞—Ç–∞');

  const name = localStorage.getItem('foxy_userName');
  if (!name || name.trim().length < 2) {
    addTypingMessage('ü¶ä –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', 500);
    setLastIntent('askName');
  } else {
    setUserName(name);
    initFoxyAfterName(name);
  }

  const btn = document.getElementById("toggle-fullscreen");
  const wrapper = document.querySelector(".chat-wrapper");
  let expanded = false;

  btn?.addEventListener("click", () => {
    expanded = !expanded;
    wrapper.classList.toggle("fullscreen");
    document.body.classList.toggle("no-scroll", expanded);
    document.body.classList.toggle("fullscreen-fix", expanded);

    const icon = btn.querySelector("i");
    if (icon) {
      icon.setAttribute("data-lucide", expanded ? "minimize" : "maximize");
      lucide.createIcons();
    }
  });

  document.addEventListener("keydown", e => {
    if (e.key === "Escape" && expanded) {
      expanded = false;
      wrapper.classList.remove("fullscreen");
      document.body.classList.remove("no-scroll");
      document.body.classList.remove("fullscreen-fix");

      const icon = btn.querySelector("i");
      if (icon) {
        icon.setAttribute("data-lucide", "maximize");
        lucide.createIcons();
      }
    }
  });

  const input = document.getElementById('pseudo-input');
  const submitBtn = document.getElementById('pseudo-submit');

  function handleSubmit() {
    const text = input.value.trim();
    if (!text) return;

    const intent = getLastIntent();
    console.log('[DEBUG] Submit intent:', intent);

    if (intent === 'askName') {
      localStorage.setItem('foxy_userName', text);
      setLastIntent('');
      clearChat();
      input.value = '';
      setUserName(text);
      initFoxyAfterName(text);
    } else {
      handleUserInput(text);
      input.value = '';
    }
  }

  submitBtn.addEventListener('click', handleSubmit);
  input.addEventListener('keydown', e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleSubmit();
    }
  });

  document.body.addEventListener('click', event => {
    const actionBtn = event.target.closest('[data-action]');
    if (actionBtn) {
      handleUserInput(actionBtn.getAttribute('data-action'));
      return;
    }
  });

  const resetBtn = document.getElementById('foxy-reset');
  resetBtn?.addEventListener('click', () => {
    if (!confirm('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?')) return;
    ['foxy_userName', 'foxy_points', 'foxy_pointsLast']
      .forEach(key => localStorage.removeItem(key));
    setLastIntent('');
    clearChat();
    input.value = '';
    addTypingMessage('ü¶ä –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', 300);
    setLastIntent('askName');
  });

  const abilitiesBtn = document.getElementById('foxy-show-abilities');
  abilitiesBtn?.addEventListener('click', () => {
    handleUserInput('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å');
  });
}
