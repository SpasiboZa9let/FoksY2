// js/pseudo-ai.js

import { handleUserInput } from './foxy/handlers/mainHandler.js';
import { addTypingMessage, renderReactions } from './foxy/ui/dom.js';
import { emoji } from './foxy/core/services.js';
import { setUserName, lastIntent, setLastIntent } from './foxy/core/state.js';

const greetings = [
  `–ü—Ä–∏–≤–µ—Ç, %NAME%! üíñ –ß–µ–º —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –Ω–æ–≥–æ—Ç–∫–∏?`,
  `–°–∞–ª—é—Ç, %NAME%! üåü –ì–æ—Ç–æ–≤–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–æ—Ç—É –≤–º–µ—Å—Ç–µ?`,
  `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, %NAME%! ‚ú® –ß—Ç–æ –≤—ã–±–µ—Ä–µ–º –¥–ª—è —Ç–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–∞–Ω–∏–∫—é—Ä–∞?`,
  `–•—ç–π, %NAME%! üíÖ –ì–æ—Ç–æ–≤–∞ –∫ —Å—Ç–∏–ª—å–Ω–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—é?`,
  `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %NAME%! üòä –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –Ω–æ–≥–æ—Ç–∫–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–º–∏!`
];

function randomGreeting(name) {
  const template = greetings[Math.floor(Math.random() * greetings.length)];
  return template.replace('%NAME%', name);
}

function showSuggestions(delay = 0) {
  setTimeout(() => {
    addTypingMessage(
      `<div class="foxy-suggestions">
         <div class="description">–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</div>
         <div class="buttons-wrapper">
           <button class="ai-btn" data-action="–ø—Ä–∞–π—Å">üíÖ –ó–∞–≥–ª—è–Ω—É—Ç—å –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</button>
           <button class="ai-btn" data-action="–¥–∏–∑–∞–π–Ω">üé® –í–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏ –¥–∏–∑–∞–π–Ω–∞</button>
           <button class="ai-btn" data-action="–∑–∞–ø–∏—Å–∞—Ç—å—Å—è">üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</button>
           <button class="ai-btn" data-action="—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å">‚ùì –£–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</button>
           <button class="ai-btn" data-action="—Å–∫–∏–¥–∫–∞">üè∑Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É</button>
         </div>
         <div class="footer">–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ –¥—É—à–µ, –∏ —è –≤—Å—ë –ø–æ–∫–∞–∂—É üíñ</div>
       </div>`,
      600,
      true
    );
  }, delay);
}

function checkPromoReminder(delay = 0) {
  setTimeout(() => {
    const promoCode = localStorage.getItem("promoCode");
    const promoExpires = localStorage.getItem("promoExpires");

    if (promoCode && promoExpires) {
      const now = Date.now();
      const expires = parseInt(promoExpires);

      if (now >= expires) {
        localStorage.removeItem("promoCode");
        localStorage.removeItem("promoExpires");
        localStorage.removeItem("promoUsed");
        return;
      }

      if (localStorage.getItem("promoUsed") !== 'true') {
        const deadline = new Date(expires).toLocaleDateString();
        addTypingMessage(
          `<div class="foxy-promo no-opacity">
             <p>üéÅ –ù–∞–ø–æ–º–∏–Ω–∞—é: —É —Ç–µ–±—è –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ <strong>${promoCode}</strong><br><small>–°—Ä–æ–∫ –¥–æ ${deadline}</small></p>
             <div class="buttons-wrapper mt-2">
               <button class="ai-btn" data-promo-action="used">‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</button>
               <button class="ai-btn" data-promo-action="later">‚è≥ –ü–æ–∫–∞ –Ω–µ—Ç</button>
             </div>
           </div>`,
          450,
          true
        );

        setTimeout(() => {
          const el = document.querySelector('.foxy-promo');
          if (el) {
            el.classList.remove('no-opacity');
            el.classList.add('foxy-fade-in');
          }
        }, 550);
      }
    }
  }, delay);
}

window.addEventListener('DOMContentLoaded', () => {
  const name = localStorage.getItem('foxy_userName');
  console.log('[DEBUG] DOMContentLoaded, –∏–º—è:', name);

  if (!name || name.trim().length < 2) {
    addTypingMessage('ü¶ä –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', 500);
    setLastIntent('askName');
    return;
  }

  setUserName(name);

  addTypingMessage(
    `<strong>${emoji()} –§–æ–∫—Å–∏:</strong> ${randomGreeting(name)}`,
    500,
    true
  );

  checkPromoReminder(1300);
  showSuggestions(2100);

  // FULLSCREEN –∫–Ω–æ–ø–∫–∞
  const btn = document.getElementById("toggle-fullscreen");
  const chatWrapper = document.querySelector(".chat-wrapper");

  let expanded = false;

  btn?.addEventListener("click", () => {
    expanded = !expanded;
    chatWrapper.classList.toggle("fullscreen");

    const icon = btn.querySelector("i");
    icon.setAttribute("data-lucide", expanded ? "minimize" : "maximize");
    lucide.createIcons();
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && expanded) {
      expanded = false;
      chatWrapper.classList.remove("fullscreen");
      const icon = btn.querySelector("i");
      icon.setAttribute("data-lucide", "maximize");
      lucide.createIcons();
    }
  });

  // –û–ë–†–ê–ë–û–¢–ö–ê –§–û–†–ú–´
  const form = document.getElementById('pseudo-form');
  const input = document.getElementById('pseudo-input');

  if (form && input) {
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const text = input.value.trim();
      if (!text) return;
      handleUserInput(text);
      input.value = '';
    });

    input.addEventListener('keydown', (e) => {
  if (e.key === 'Enter') {
    e.preventDefault();
    const text = input.value.trim();
    if (!text) return;

    // üîç –ï—Å–ª–∏ –§–æ–∫—Å–∏ –∂–¥—ë—Ç –∏–º—è
    if (lastIntent === 'askName') {
      localStorage.setItem('foxy_userName', text);
      setUserName(text);
      setLastIntent(null);
      document.getElementById('pseudo-chat').innerHTML = '';
      window.location.reload(); // üîÅ –ß–∏—Å—Ç–æ –∏ –ø—Ä–æ—Å—Ç–æ
    } else {
      form.dispatchEvent(new Event('submit'));
    }
  }
});
});

// ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö —Å data-action
document.body.addEventListener('click', event => {
  const btn = event.target.closest('[data-action]');
  if (btn) {
    const cmd = btn.getAttribute('data-action');
    if (cmd) {
      console.log('[FOXY DEBUG] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å data-action:', cmd);
      handleUserInput(cmd);
    }
  }
});

// ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ú–û-–ö–ù–û–ü–û–ö
document.body.addEventListener('click', event => {
  const promoBtn = event.target.closest('[data-promo-action]');
  if (!promoBtn) return;

  const action = promoBtn.getAttribute('data-promo-action');
  console.log('[FOXY DEBUG] –ö–ª–∏–∫ –ø–æ –ø—Ä–æ–º–æ-–∫–Ω–æ–ø–∫–µ:', action);

  if (action === 'used') {
    localStorage.removeItem("promoCode");
    localStorage.removeItem("promoExpires");
    localStorage.setItem("promoUsed", "true");
    addTypingMessage(`–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å üòä`, 300);
    promoBtn.closest('.foxy-promo')?.remove();
  }

  if (action === 'later') {
    addTypingMessage(`–û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ üòâ`, 300);
  }
});


